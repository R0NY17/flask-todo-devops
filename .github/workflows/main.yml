name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:

  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install flake8
        run: pip install flake8

      - name: Run flake8
        run: flake8 app.py --count --select=E9,F63,F7,F82 --show-source --statistics

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest

      - name: Run tests
        run: |
          export PYTHONPATH=.
          pytest

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-todo-app:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-todo-app:latest

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy over SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-todo-app:latest
            docker stop myapp || true
            docker rm myapp || true
            docker run -d --name myapp -p 80:5000 ${{ secrets.DOCKER_USERNAME }}/flask-todo-app:latest

  health_check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Wait and check health
        run: |
          echo "Waiting for app..."
          for i in {1..10}; do
            sleep 3
            if curl --fail http://${{ secrets.EC2_HOST }}/health; then
              echo "Healthy!"
              exit 0
            fi
          done
          echo "Health check failed!"
          exit 1
